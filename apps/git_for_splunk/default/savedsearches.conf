[GitForSplunk Run Health]
action.email = 1
action.email.include.view_link = 0
action.email.message.alert = $result.body$
action.email.subject.alert = $result.subject$
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 7-59/15 * * * *
disabled = 1
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.page.search.mode = verbose
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = git_for_splunk
request.ui_dispatch_view = search
search = sourcetype=gitforsplunk index=_internal\
| regex _raw != "(?s)COMMAND: git commit.*no changes added to commit"\
| eval success_body = commit_hash + "\
\
" + commit_message + "\
\
" + mvjoin(changed_file, "\
") + "\
\
"\
| eval body = case(status=0, success_body, status=1, ("Changes were committed to the repository but an unexpected error occured\
\
" + _raw), true(), ("Changes could not be commited.\
\
" + _raw)) \
| eval status = case(status=0, "OK", status=1, "Warning", true(), "Error") \
| eval changes = if(isnull(changed_file), "", "Changes: " + tostring(mvcount(changed_file)) + ", ")\
| eval size = if(isnull(repo_size), "", "RepoSize: " + tostring(round(repo_size / 1000000)) + "mb, ")\
| eval subject = "GitForSplunk on " + host + ": [" + status + "] " + changes + size + "Runtime: " + tostring(round(runtime)) + "sec, " + strftime(_time, "%Y-%m-%d %H:%M ") \
| fields body subject
